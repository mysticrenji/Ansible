---
- name: Azure IoT DPS execution
  hosts: localhost
  connection: local
  ## CHANGED HERE - added variable for files to download. use ansible_env.HOME for user home directory.
  ssl_files_download:
      - file_src: https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/certGen.sh
        file_dst: "{{ ansible_env.HOME }}"/certs/certGen.sh
      - file_src: https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_device_intermediate_ca.cnf
        file_dst: "{{ ansible_env.HOME }}"/certs/openssl_device_intermediate_ca.cnf
      - file_src: https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_root_ca.cnf
        file_dst: "{{ ansible_env.HOME }}"/certs/openssl_root_ca.cnf
        
  vars_files:
    - ./vars/main.yml
  # roles:
  #   - role: "ocha.dotnet-core"
  #     become: yes
    
  tasks:
  #- name: Folder Creation in the home folder
  #  file:
  #    path: $HOME/certs/leafcerts
  #    state: directory
  #- name: Download certificate generation scripts
  #  shell: |
  #   curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/certGen.sh --output certGen.sh
  #   curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_device_intermediate_ca.cnf --output openssl_device_intermediate_ca.cnf
  #   curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_root_ca.cnf --output openssl_root_ca.cnf
  #   chmod 700 certGen.sh
  #   ./certGen.sh create_root_and_intermediate
  #  args:
  #    chdir: $HOME/certs
   
  ## CHANGED HERE - create certs/leafcerts directory
  - name: Create certs directory if it does not exist
    file:
      path: "{{ ansible_env.HOME }}"/certs/leafcerts
      state: directory
      mode: '0755'
  
  ## CHANGED HERE - download and set permission for files using dictionary
  - name: Download files for SSL
    get_url:
      url: "{{ item.file_src }}"
      dest: "{{ item.file_dest }}"
      mode: '0755'
    loop: "{{ ssl_files_download }}"
   
  ## CHANGED HERE - 700 permission for certGen.sh
  - name: Change file ownership, group and permissions
    file:
      path: "{{ ansible_env.HOME }}"/certs/certGen.sh
      mode: '0700'
 
  ## CHANGED HERE - execute the script
  - name: Execute certGen.sh script to generate certs
    shell: './certGen.sh create_root_and_intermediate'
    args:
      chdir: "{{ ansible_env.HOME }}"/certs

  # - name: Check Az CLI is installed on the machine
  #   shell: "which az iot"
  #   register: result
  #   ignore_errors: true

  # - fail:
  #     msg: "Azure CLI is not found. Please install it first"
  #   when: result.rc != 0
        # if ["$rootexists" == "rootca"]  
      # then
      #az iot dps certificate update --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name MyCertificate --path /certificates/NewCertificate.pem --etag $etag
      # else
      # az iot dps certificate create --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --path ./certs/azure-iot-test-only.root.ca.cert.pem
      # fi
      # az iot dps enrollment-group update -g "{{ resourcegroup }}" --dps-name "{{ dpsname }}" --enrollment-id "{{ enrollmentid }}" --certificate-path ./certs/verification-code.cert.pem

  - name: Upload Generated Root CA to DPS
    shell: |
      rootexists=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "name" -o tsv)
      etag=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "etag" -o tsv)
      az iot dps certificate update --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --path ./certs/azure-iot-test-only.root.ca.cert.pem --etag $etag
    args:
      chdir: $HOME/certs/
  
  - name: Generate Proof of Possesion and Verification
    shell: |
      etag=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "etag" -o tsv)
      verifycode=$(az iot dps certificate generate-verification-code --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --etag $etag  --query "properties.verificationCode" -o tsv)
      ./certGen.sh create_verification_certificate $verifycode
    args:
      chdir: $HOME/certs/

  - name: Create DPS Enrollment Group
    shell: |
      etag=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "etag" -o tsv)
      az iot dps certificate verify --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}"  --path ./certs/verification-code.cert.pem --etag $etag
      az iot dps enrollment-group update -g "{{ resourcegroup }}" --dps-name "{{ dpsname }}" --enrollment-id "{{ enrollmentid }}"
    args:
      chdir: $HOME/certs/
  
  - name: Generate Leaf certificates
    shell: |
      ./certGen.sh create_device_certificate "{{ inventory_hostname }}"
    args:
      chdir: $HOME/certs/
     
